esphome:
  name: lilygo
  platformio_options:
    # Unless noted otherwise, based on https://github.com/Xinyuan-LilyGO/LilyGo-EPD47/blob/1eb6119fc31fcff7a6bafecb09f4225313859fc5/examples/demo/platformio.ini#L37
    upload_speed: 921600
    monitor_speed: 115200
    board_build.mcu: esp32s3
    board_build.f_cpu: 240000000L
    board_build.arduino.memory_type: qspi_opi
    board_build.flash_size: 16MB
    board_build.flash_mode: qio
    board_build.flash_type: qspi
    board_build.psram_type: opi
    board_build.memory_type: qspi_opi
    board_build.boot_freq: 80m
    platform_packages:
      - "toolchain-riscv32-esp @8.4.0+2021r2-patch5"
    build_flags:  # the first three defines are required for the screen library to function.
      - "-DBOARD_HAS_PSRAM"
      - "-DARDUINO_RUNNING_CORE=0"  # TODO: this conflicts with the value from platformio's idedata, spewing a lot of warnings during the build.
      - "-DARDUINO_EVENT_RUNNING_CORE=0"  # and this too
      # In addition to lilygo's settings:
      # To enable reading logs over USB until `hardware_uart: USB_CDC` support
      # is added to `logger:`, as detailed in <https://github.com/esphome/feature-requests/issues/1906>:
      - "-DARDUINO_USB_MODE=1"
      - "-DARDUINO_USB_CDC_ON_BOOT=1"

esp32:
  variant: esp32s3
  board: esp32-s3-devkitc-1

  framework:
    type: arduino
    # Just like in <https://community.home-assistant.io/t/enable-usb-cdc-to-log-hello-world-to-esp32-s3-dev-board-for-esphome/463164/10>
    # I had problems with newer versions; the following combination happens to work, so using it for now.
    version: 2.0.3
    platform_version: 5.1.1

logger:
  level: VERBOSE
  # hardware_uart: USB_CDC  # see note about <https://github.com/esphome/feature-requests/issues/1906> above


# Enable Home Assistant API
api:
  encryption:
    key: "your_enc_key"

ota:
  password: "your_ota_passkey"

web_server: # so you see the data and monitor the sensor updates from inside the esphome dashboard
  port: 80

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
// change settings to define a static ip for your device if required, if not comment the next 6 lines out for dhcp
  manual_ip:
    # Set this to the IP of the ESP to give it a fixed static local ip address
    static_ip: 192.168.1.226
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
  power_save_mode: LIGHT

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "E-Paper-Weather Fallback Hotspot"
    password: "BvLrX4xYWoIU"

binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO21 #was GPIO39 on the previous board
      inverted: true
    name: "Button 1"
    on_press:
      - logger.log: PhysButton Pressed # - component.update: t5_display this maybe forces a refresh & update ??
 
  - platform: homeassistant
    id: t547_battery_voltage
    entity_id: sensor.T547_battery_voltage

  - platform: status
    name: "Status"
  - platform: homeassistant
    name: "OTA Mode"
    id: otamode
    entity_id: input_boolean.display_ota_mode 

external_components:
  source:
    type: local
    path: components/
  components: ["t547", "lilygo_t5_47_battery"]

i2c:
  - id: bus_a
    sda: GPIO18
    scl: GPIO17
    frequency: 100khz
    # There is some problems with i2c scan so turn scan off if problem appear on your board
    scan: False
 
time:
  - platform: pcf8563
    id: internal_clock
    address: 0x51  
    i2c_id: bus_a
  - platform: homeassistant
    id: ha_time
    on_time_sync:
      then:
        - pcf8563.write_time

## Only needed if powered via battery ##
#deep_sleep:
#  run_duration: ${run_time}
#  sleep_duration: ${sleep_time}
#  id: deep_sleep_1
#  esp32_ext1_wakeup:
#    pins: GPIO39
#    mode: ALL_LOW
#    allow_other_uses: true
## -- ##

captive_portal:

sensor:
  - platform: homeassistant
    id: t547_voltage
    entity_id: sensor.T547_battery_voltage

  - platform: lilygo_t5_47_battery
    id: t547_Battery_voltage
    voltage:
      name: "t547 Battery Voltage"

  - platform: template
    name: "t547 Battery Percentage"
    id: t547_battery_percentage
    lambda: |-
      // tweak values in mapping for calibration
      // 4.1 = max voltage
      // 3.3 = min voltage
      float y = (id(t547_Battery_voltage).voltage->state - 3.3) * 100.0 / (4.1 - 3.3);
      if (y < 100.0) { return y; } else { return 100.0; };

  - platform: homeassistant
    id: out_temp
    entity_id: sensor.fineoffset_whx080_0_64_temperature

  - platform: homeassistant
    id: out_humidity
    entity_id: sensor.fineoffset_whx080_0_64_humidity

  - platform: homeassistant
    id: wind_speed
    entity_id: sensor.fineoffset_wind_average_mph

  - platform: homeassistant
    id: wind_speed_gust
    entity_id: sensor.fineoffset_wind_gust_average_mph

  - platform: homeassistant
    id: air_pressure
    entity_id: sensor.esp8266_bmp280_air_pressure

  - platform: homeassistant
    id: temp_h1
    entity_id: sensor.temperature_forecast_h1
  
  - platform: homeassistant
    id: temp_h2
    entity_id: sensor.temperature_forecast_h2
  
  - platform: homeassistant
    id: temp_h3
    entity_id: sensor.temperature_forecast_h3

  - platform: homeassistant
    id: temp_h4
    entity_id: sensor.temperature_forecast_h4

  - platform: homeassistant
    id: temp_h5
    entity_id: sensor.temperature_forecast_h5

  - platform: homeassistant
    id: temp_d1
    entity_id: sensor.temperature_forecast_d1
  
  - platform: homeassistant
    id: temp_d2
    entity_id: sensor.temperature_forecast_d2
  
  - platform: homeassistant
    id: temp_d3
    entity_id: sensor.temperature_forecast_d3

  - platform: homeassistant
    id: temp_d4
    entity_id: sensor.temperature_forecast_d4

  - platform: homeassistant
    id: temp_d5
    entity_id: sensor.temperature_forecast_d5

  - platform: homeassistant
    id: rain_h1
    entity_id: sensor.rain_forecast_h1

  - platform: homeassistant
    id: rain_h2
    entity_id: sensor.rain_forecast_h2

  - platform: homeassistant
    id: rain_h3
    entity_id: sensor.rain_forecast_h3

  - platform: homeassistant
    id: rain_h4
    entity_id: sensor.rain_forecast_h4

  - platform: homeassistant
    id: rain_h5
    entity_id: sensor.rain_forecast_h5

text_sensor:
  
  - platform: homeassistant
    id: wind_dir
    entity_id: sensor.cardinal_wind_dir

  - platform: homeassistant
    id: weather_now
    entity_id: sensor.weathercurrent
  
  - platform: homeassistant
    id: weather_h1
    entity_id: sensor.weather_forecast_h1
  
  - platform: homeassistant
    id: weather_h2
    entity_id: sensor.weather_forecast_h2
  
  - platform: homeassistant
    id: weather_h3
    entity_id: sensor.weather_forecast_h3

  - platform: homeassistant
    id: weather_h4
    entity_id: sensor.weather_forecast_h4
  
  - platform: homeassistant
    id: weather_h5
    entity_id: sensor.weather_forecast_h5

  - platform: homeassistant
    id: weather_d1
    entity_id: sensor.weather_forecast_d1
  
  - platform: homeassistant
    id: weather_d2
    entity_id: sensor.weather_forecast_d2
  
  - platform: homeassistant
    id: weather_d3
    entity_id: sensor.weather_forecast_d3

  - platform: homeassistant
    id: weather_d4
    entity_id: sensor.weather_forecast_d4

  - platform: homeassistant
    id: weather_d5
    entity_id: sensor.weather_forecast_d5

  - platform: homeassistant
    id: moon_phase
    entity_id: sensor.moon_phase

  - platform: homeassistant
    id: wifi_ssid_text
    entity_id: sensor.lilygo_weather_esp_connected_ssid

  - platform: homeassistant
    id: wifi_ip_text
    entity_id: sensor.lilygo_weather_esp_ip_address

  - platform: wifi_info
    ip_address:
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID
    bssid:
      name: ESP Connected BSSID
    mac_address:
      name: ESP Mac Wifi Address
    scan_results:
      name: ESP Latest Scan Results
    dns_address:
      name: ESP DNS Address

button:
  - platform: restart
    name: "Dashboard - Restart"

font:
  - file: "gfonts://Inter@900"
    id: big
    size: 100
  - file: "gfonts://Inter@900"
    id: medium
    size: 60
  - file: "gfonts://Inter@700"
    id: small
    size: 30
  - file: "gfonts://Inter@700"
    id: tiny
    size: 24
  - file: "fonts/OCRAEXT.ttf"
    id: fontocra_24
    size: 24

  # Include Material Design Icons font
  # Thanks to https://community.home-assistant.io/t/display-materialdesign-icons-on-esphome-attached-to-screen/199790/16
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_160
    size: 160
    glyphs: &mdi-weather-glyphs
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-clear-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
      - "\U000F0F61" # moon-first-quarter
      - "\U000F0F62" # moon-full
      - "\U000F0F63" # moon-last-quarter
      - "\U000F0F64" # moon-new
      - "\U000F0F65" # moon-waning-crescent
      - "\U000F0F66" # moon-waning-gibbous
      - "\U000F0F67" # moon-waxing-crescent
      - "\U000F0F68" # moon-waxing-gibbous

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_moon_130
    size: 130
    glyphs: *mdi-weather-glyphs

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_100
    size: 100
    glyphs: *mdi-weather-glyphs

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_40
    size: 40
    bpp: 4
    glyphs: *mdi-weather-glyphs

#Make Temp Graph
graph:
    - id: temp_graph
      duration: 12h
      width: 200
      height: 50
      border: True
      traces:
        - sensor: out_temp
          line_thickness: 3
    - id: humi_graph
      duration: 12h
      width: 200
      height: 50
      border: True
      traces:
        - sensor: out_humidity
          line_thickness: 3
#Display Setup

display:
  - platform: t547
    # rotation: 180
    update_interval: 60s

    lambda: |-
      // Map weather states to MDI characters.
      std::map<std::string, std::string> icon_map
        {
          {"cloudy", "\U000F0590"},
          {"cloudy-alert", "\U000F0F2F"},
          {"cloudy-arrow-right", "\U000F0E6E"},
          {"fog", "\U000F0591"},
          {"hail", "\U000F0592"},
          {"hazy", "\U000F0F30"},
          {"hurricane", "\U000F0898"},
          {"lightning", "\U000F0593"},
          {"lightning-rainy", "\U000F067E"},
          {"clear-night", "\U000F0594"},
          {"night-partly-cloudy", "U000F0F31"},
          {"partlycloudy", "\U000F0595"},
          {"partly-lightning", "\U000F0F32"},
          {"partly-rainy", "\U000F0F33"},
          {"partly-snowy", "\U000F0F34"},
          {"partly-snowy-rainy", "\U000F0F35"},
          {"pouring", "\U000F0596"},
          {"rainy", "\U000F0597"},
          {"snowy", "\U000F0598"},
          {"snowy-heavy", "\U000F0F36"},
          {"snowy-rainy", "\U000F067F"},
          {"sunny", "\U000F0599"},
          {"sunny-alert", "\U000F0F37"},
          {"sunny-off", "\U000F14E4"},
          {"sunset", "\U000F059A"},
          {"sunset-down", "\U000F059B"},
          {"sunset-up", "\U000F059C"},
          {"tornado", "\U000F0F38"},
          {"windy", "\U000F059D"},
          {"windy-variant", "\U000F059E"},

        };

      std::map<std::string, std::string> moon_icon_map
        {
          {"first_quarter", "\U000F0F61"},
          {"full_moon", "\U000F0F62"},
          {"last_quarter", "\U000F0F63"},
          {"new_moon", "\U000F0F64"},
          {"waning_crescent", "\U000F0F65"},
          {"waning_gibbous", "\U000F0F66"},
          {"waxing_crescent", "\U000F0F67"},
          {"waxing_gibbous", "\U000F0F68"},
          
        };

      // Forecast Boxes
      it.rectangle(550,40,80,80); // Hourly rain forecast box
      it.rectangle(550,40,160,80); // Hourly rain forecast box
      it.rectangle(550,40,240,80); // Hourly rain forecast box
      it.rectangle(550,40,320,80); // Hourly rain forecast box
      it.rectangle(550,40,400,80); // Hourly rain forecast box
      it.rectangle(550,190,80,80); // Hourly forecast box
      it.rectangle(550,190,160,80); // Hourly forecast box
      it.rectangle(550,190,240,80); // Hourly forecast box
      it.rectangle(550,190,320,80); // Hourly forecast box
      it.rectangle(550,190,400,80); // Hourly forecast box
      it.rectangle(550,340,80,80); // Daily forecast box
      it.rectangle(550,340,160,80); // Daily forecast box
      it.rectangle(550,340,240,80); // Daily forecast box
      it.rectangle(550,340,320,80); // Daily forecast box
      it.rectangle(550,340,400,80); // Daily forecast box
      //Date and Time
      it.strftime(360, 10, id(small), TextAlign::CENTER_HORIZONTAL, "%A %B %d, %Y", id(internal_clock).now());
      it.strftime(360, 30, id(big), TextAlign::CENTER_HORIZONTAL, "%H:%M", id(internal_clock).now());
      //Current Weather
      it.printf(410, 180, id(tiny), TextAlign::CENTER_HORIZONTAL, "Outside is: %s", id(weather_now).state.c_str());
      it.printf(410, 200, id(font_mdi_160), TextAlign::CENTER_HORIZONTAL, "%s",icon_map[id(weather_now).state.c_str()].c_str());
      it.printf(410, 360, id(medium), TextAlign::CENTER_HORIZONTAL, "%.1f°", id(out_temp).state);
      // Moon Phase
      it.circle(110, 90, 55);
      it.printf(110, 25, id(font_moon_130), TextAlign::CENTER_HORIZONTAL, "%s",moon_icon_map[id(moon_phase).state.c_str()].c_str());
      it.printf(110, 170, id(tiny), TextAlign::CENTER_HORIZONTAL, "%s", id(moon_phase).state.c_str());
      //Hourly Forecast
      it.printf(750,160, id(tiny), TextAlign::CENTER_HORIZONTAL, "Hourly Forecast");
      it.printf(590,270, id(tiny), TextAlign::CENTER_HORIZONTAL, "1hr");
      it.printf(670,270, id(tiny), TextAlign::CENTER_HORIZONTAL, "2hr");
      it.printf(750,270, id(tiny), TextAlign::CENTER_HORIZONTAL, "3hr");
      it.printf(830,270, id(tiny), TextAlign::CENTER_HORIZONTAL, "4hr");
      it.printf(910,270, id(tiny), TextAlign::CENTER_HORIZONTAL, "5hr");
      it.printf(590,200,id(font_mdi_40),TextAlign::CENTER_HORIZONTAL,"%s",icon_map[id(weather_h1).state.c_str()].c_str());
      it.printf(670,200,id(font_mdi_40),TextAlign::CENTER_HORIZONTAL,"%s",icon_map[id(weather_h2).state.c_str()].c_str());
      it.printf(750,200,id(font_mdi_40),TextAlign::CENTER_HORIZONTAL,"%s",icon_map[id(weather_h3).state.c_str()].c_str());
      it.printf(830,200,id(font_mdi_40),TextAlign::CENTER_HORIZONTAL,"%s",icon_map[id(weather_h4).state.c_str()].c_str());
      it.printf(910,200,id(font_mdi_40),TextAlign::CENTER_HORIZONTAL,"%s",icon_map[id(weather_h5).state.c_str()].c_str());
      it.printf(590,240,id(tiny),TextAlign::CENTER_HORIZONTAL, "%.0f°", id(temp_h1).state);
      it.printf(670,240,id(tiny),TextAlign::CENTER_HORIZONTAL, "%.0f°", id(temp_h2).state);
      it.printf(750,240,id(tiny),TextAlign::CENTER_HORIZONTAL, "%.0f°", id(temp_h3).state);
      it.printf(830,240,id(tiny),TextAlign::CENTER_HORIZONTAL, "%.0f°", id(temp_h4).state);
      it.printf(910,240,id(tiny),TextAlign::CENTER_HORIZONTAL, "%.0f°", id(temp_h5).state);
      //Hourly Rain Forecast
      it.printf(750,10, id(tiny), TextAlign::CENTER_HORIZONTAL, "Hourly Rain Forecast");
      it.printf(590,120, id(tiny), TextAlign::CENTER_HORIZONTAL, "1hr");
      it.printf(670,120, id(tiny), TextAlign::CENTER_HORIZONTAL, "2hr");
      it.printf(750,120, id(tiny), TextAlign::CENTER_HORIZONTAL, "3hr");
      it.printf(830,120, id(tiny), TextAlign::CENTER_HORIZONTAL, "4hr");
      it.printf(910,120, id(tiny), TextAlign::CENTER_HORIZONTAL, "5hr");
      it.printf(590,50,id(font_mdi_40),TextAlign::CENTER_HORIZONTAL,"%s",icon_map[id(weather_h1).state.c_str()].c_str());
      it.printf(670,50,id(font_mdi_40),TextAlign::CENTER_HORIZONTAL,"%s",icon_map[id(weather_h2).state.c_str()].c_str());
      it.printf(750,50,id(font_mdi_40),TextAlign::CENTER_HORIZONTAL,"%s",icon_map[id(weather_h3).state.c_str()].c_str());
      it.printf(830,50,id(font_mdi_40),TextAlign::CENTER_HORIZONTAL,"%s",icon_map[id(weather_h4).state.c_str()].c_str());
      it.printf(910,50,id(font_mdi_40),TextAlign::CENTER_HORIZONTAL,"%s",icon_map[id(weather_h5).state.c_str()].c_str());
      it.printf(590,90,id(tiny),TextAlign::CENTER_HORIZONTAL, "%.1f", id(rain_h1).state);
      it.printf(670,90,id(tiny),TextAlign::CENTER_HORIZONTAL, "%.1f", id(rain_h2).state);
      it.printf(750,90,id(tiny),TextAlign::CENTER_HORIZONTAL, "%.1f", id(rain_h3).state);
      it.printf(830,90,id(tiny),TextAlign::CENTER_HORIZONTAL, "%.1f", id(rain_h4).state);
      it.printf(910,90,id(tiny),TextAlign::CENTER_HORIZONTAL, "%.1f", id(rain_h5).state);
      //Daily Forecast
      it.printf(750,310, id(tiny), TextAlign::CENTER_HORIZONTAL, "Daily Forecast");
      it.printf(590,420, id(tiny), TextAlign::CENTER_HORIZONTAL, "1d");
      it.printf(670,420, id(tiny), TextAlign::CENTER_HORIZONTAL, "2d");
      it.printf(750,420, id(tiny), TextAlign::CENTER_HORIZONTAL, "3d");
      it.printf(830,420, id(tiny), TextAlign::CENTER_HORIZONTAL, "4d");
      it.printf(910,420, id(tiny), TextAlign::CENTER_HORIZONTAL, "5d");
      it.printf(590,350,id(font_mdi_40),TextAlign::CENTER_HORIZONTAL,"%s",icon_map[id(weather_d1).state.c_str()].c_str());
      it.printf(670,350,id(font_mdi_40),TextAlign::CENTER_HORIZONTAL,"%s",icon_map[id(weather_d2).state.c_str()].c_str());
      it.printf(750,350,id(font_mdi_40),TextAlign::CENTER_HORIZONTAL,"%s",icon_map[id(weather_d1).state.c_str()].c_str());
      it.printf(830,350,id(font_mdi_40),TextAlign::CENTER_HORIZONTAL,"%s",icon_map[id(weather_d4).state.c_str()].c_str());
      it.printf(910,350,id(font_mdi_40),TextAlign::CENTER_HORIZONTAL,"%s",icon_map[id(weather_d5).state.c_str()].c_str());
      it.printf(590,390,id(tiny),TextAlign::CENTER_HORIZONTAL, "%.0f°", id(temp_d1).state);
      it.printf(670,390,id(tiny),TextAlign::CENTER_HORIZONTAL, "%.0f°", id(temp_d2).state);
      it.printf(750,390,id(tiny),TextAlign::CENTER_HORIZONTAL, "%.0f°", id(temp_d3).state);
      it.printf(830,390,id(tiny),TextAlign::CENTER_HORIZONTAL, "%.0f°", id(temp_d4).state);
      it.printf(910,390,id(tiny),TextAlign::CENTER_HORIZONTAL, "%.0f°", id(temp_d5).state);
      //Outdoor Weather Data
      it.printf(20, 240, id(tiny), "Humidity: %.1f%%", id(out_humidity).state);
      it.printf(20, 270, id(tiny), "Wind Speed: %.1f mp/h", id(wind_speed).state);
      it.printf(20, 300, id(tiny), "Gust Speed: %.1f mp/h", id(wind_speed_gust).state);
      it.printf(20, 330, id(tiny), "Wind Direction: %s", id(wind_dir).state.c_str());
      it.printf(20, 360, id(tiny), "Pressure: %.1f hpa", id(air_pressure).state);
      //Temp Graph
      it.printf(20, 470, id(tiny), "Temperature 12hrs:-");
      it.graph(280, 460, id(temp_graph));
      it.printf(530, 470, id(tiny), "Humidity 12hrs:-");
      it.graph(750, 460, id(humi_graph));
      //System Info
      it.printf(10, 510, id(fontocra_24), TextAlign::TOP_LEFT, "Battery: %.0f%%", id(t547_battery_percentage).state);
      it.printf(240, 510, id(fontocra_24), TextAlign::TOP_LEFT, "Volts: %.1fV", id(t547_voltage).state);
      it.printf(460, 510, id(fontocra_24), TextAlign::TOP_LEFT, "Wifi: %s", id(wifi_ssid_text).state.c_str());
      it.printf(750, 510, id(fontocra_24), TextAlign::TOP_LEFT, "%s", id(wifi_ip_text).state.c_str());
